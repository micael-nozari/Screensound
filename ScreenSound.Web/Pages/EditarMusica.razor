@page "/EditarMusica/{NomeMusica}"

@inject ArtistaAPI artistaAPI
@inject GeneroAPI generoAPI
@inject MusicasAPI musicaAPI
@inject NavigationManager navigationManager
@inject IDialogService DialogService

<MudPaper Class="px-8 pt-2 pb-4 mx-12 my-8" Justify="Justify.Center">

    <MudText Class="mt-8" Typo="Typo.h4">Cadastro de Música</MudText>

    <MudForm>

        <MudTextField Class="mt-4" T="string" Placeholder="Nome da música/canção"
                      @bind-Value="nome"
                      Variant="Variant.Outlined"
                      Required="true"
                      RequiredError="Campo obrigatório." />
        <MudSelect Class="mt-4" T="ArtistaResponse" Label="Artistas"
                   @bind-Value="ArtistaDaMusica"
                   Variant="Variant.Filled" AnchorOrigin="Origin.BottomCenter">
            @if (artistas is not null)
            {
                @foreach (var artista in artistas)
                {
                    <MudSelectItem Value="artista" />
                }
            }
        </MudSelect>

        <MudTextField Class="mt-4" Placeholder="Ano de lançamento"
                      @bind-Value="anoLancamento"
                      Variant="Variant.Outlined"
                      Lines="1"
                      Required="true"
                      RequiredError="Campo obrigatório." />

        <MudSelect Class="mt-4" T="GeneroResponse" Label="Gêneros"
                   Variant="Variant.Filled" ValueChanged="GeneroSelecionado" AnchorOrigin="Origin.BottomCenter">
            @if (generos is not null)
            {
                @foreach (var genero in generos)
                {
                    <MudSelectItem Value="genero" />
                }
            }
            @if (GenerosSelecionados is not null)
            {
                foreach (var genero in GenerosSelecionados)
                {
                    <MudAlert Severity="Severity.Info">@(genero.Nome) adicionado como gênero da música.</MudAlert>
                }
            }
        </MudSelect>

        <div class="d-flex align-center justify-space-between mt-4">
            <MudButton Variant="Variant.Filled"
                       Color="Color.Primary"
                       Class="ml-auto"
                       @onclick="Editar">
                Salvar
            </MudButton>
            <MudButton Variant="Variant.Filled"
                       @onclick="Deletar"
                       Color="Color.Secondary"
                       Class="ml-3">
                Deletar
            </MudButton>
            <MudButton Variant="Variant.Filled"
                       Color="Color.Info"
                       Class="ml-3"
                       @onclick="Voltar">
                Voltar
            </MudButton>
        </div>

    </MudForm>

</MudPaper>

@code {
    private int? anoLancamento;
    private string? nome;

    private ICollection<ArtistaResponse>? artistas;
    private ICollection<GeneroResponse>? generos;

    private List<GeneroResponse>? GenerosSelecionados { get; set; } = new();
    private ArtistaResponse? ArtistaDaMusica { get; set; }

    private MusicaResponse? Musica { get; set; }

    [Parameter]
    public string? NomeMusica { get; set; }


    protected override async Task OnInitializedAsync()
    {
        Musica = await musicaAPI.GetMusicaPorNomeAsync(NomeMusica!);
        anoLancamento = Musica!.AnoLancamento;
        nome = Musica!.Nome;
        ArtistaDaMusica = new ArtistaResponse(Musica.ArtistaId, Musica.NomeArtista, string.Empty, string.Empty);
    }

    private void ArtistaSelecionado(ArtistaResponse artista)
    {
        ArtistaDaMusica = artista;
    }

    private void GeneroSelecionado(GeneroResponse genero)
    {
        if ((GenerosSelecionados is not null) && (!GenerosSelecionados.Contains(genero)))
        {
            GenerosSelecionados.Add(genero);
        }
    }

    private List<GeneroRequest>? GenerosRequest { get; set; } = new();
    public async Task Deletar()
    {
        bool? result = await DialogService.ShowMessageBox(
            "Deletar",
            "Deseja deletar esta música?",
            yesText: "Deletar", cancelText: "Cancelar");

        if (result != null)
        {
            await musicaAPI.DeleteMusicaAsync(Musica!.Id);
            navigationManager.NavigateTo("/MusicasPorArtista");
        }
    }

    private async Task Editar()
    {
        var requestEdit = new MusicaRequestEdit(Musica!.Id, nome!, ArtistaDaMusica!.Id, anoLancamento!.Value);
        await musicaAPI.UpdateMusicaAsync(requestEdit);
        navigationManager.NavigateTo("/MusicasPorArtista");
    }

    public void Voltar()
    {
        navigationManager.NavigateTo("/MusicasPorArtista");
    }
}
